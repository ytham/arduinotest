{
  "name": "leapjs",
  "version": "0.1.2",
  "description": "Leap Motion Client",
  "main": "lib",
  "scripts": {
    "test": "make test-node"
  },
  "license": "BSD-2-Clause",
  "dependencies": {
    "ws": "*"
  },
  "devDependencies": {
    "underscore": "*",
    "browserify": "git://github.com/substack/node-browserify.git",
    "mocha": "1.7.4",
    "node-static": "*",
    "uglify-js": "*",
    "chai": "*",
    "mocha-phantomjs": "*",
    "nodemon": "*"
  },
  "readme": "# LeapJS\n\nWelcome to the Leap JavaScript framework. This is intended for use with the Leap (https://www.leapmotion.com/).\n\n[![Build Status](https://travis-ci.org/leapmotion/leapjs.png)](https://travis-ci.org/leapmotion/leapjs)\n\n## Installation\n\nIf you're using npm, you can use `npm install leapjs`.\n\n## Usage\n\nLeapJS works from with Node.js or your browser.\n\n### From the browser\n\nInclude the leap.js script included at the root of this package, or, use the minified version provided at leap.min.js.\n\n```html\n<script src=\"./leap.min.js\"></script>\n```\n\n### From node\n\nUse the following:\n\n```javascript\nvar Leap = require('leapjs').Leap\n```\n\n### Getting frames\n\nTo listen to the frame events, you can use the friendly `Leap.loop` function.\nThis will auto-detect which type of event loop you can accept, and, call your callback with frames.\n\n```javascript\nLeap.loop(function(frame) {\n  // ... your code here\n})\n```\n\nAs well, you can call a special version of `Leap.loop` where you provide a second argument to the callback.\nThis allows you to wait until you're ready to receieve further frame events. Here is an exmaple of\nthis approach.\n\n```javascript\nLeap.loop(function(frame, done) {\n  // do somethings\n  done() // if you don't invoke this, you won't get more events\n})\n```\n\n### Internals of the event loop\n\nLeap.loop attempts to pick the right event loop to use. Within the\nbackground page of a Chrome extension, Chrome will not use the `animationFrame` loop. As well,\nin Node.js no animation event exists.\n\nIn general, browsers optimize the load of requestAnimationFrame based on load, element visibility,\nbattery status, etc. Chrome has chosen to optimize this by omitting the functionality\naltogether in the background.js of its extensions.\n\nTo manually pick the event type you'd like to use, create a leap controller and listen for the appropriate event\ntype, either `frame` or `animationFrame`.\n\n### Picking your own event type\n\n```javascript\nvar controller = new Leap.Controller();\n\n// for the frame event\ncontroller.on('frame', function() {\n  console.log(\"hello frame\")\n})\n\n// for the animationFrame event. this is only supported from within the browser\ncontroller.on('animationFrame', function() {\n  console.log(\"hello frame\")\n})\ncontroller.connect()\n```\n\n## Examples\n\nInside the examples directory are a few great examples. To get them running, do the following:\n\n* Run `npm install`\n* Run `make serve`\n* Point your browser at http://localhost:8080/examples and enjoy\n\n### Node.js example\n\nTo run the node.js example, run `node exmaples/node.js`.\n\n## Development\n\nYou can build your own leap.js file by using `make build`. If you're doing any amount of development, you'll find it\nconvenient to run `make watch`. This takes care of building leap.js for you on every edit. As well, you can both\nwatch and running `make watch-test`.\n\n## Tests\n\nThere are currently rudamentary tests. To get them running, do the following:\n\n* Run `npm install`\n* Run `make test`\n\nOr use make watch-test as noted above.",
  "readmeFilename": "README.md",
  "_id": "leapjs@0.1.2",
  "_from": "leapjs@"
}
